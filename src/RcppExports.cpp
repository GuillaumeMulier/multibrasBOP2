// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GenPts
IntegerMatrix GenPts(int NSim, IntegerVector AnaInter, NumericMatrix Probs, double Seed);
RcppExport SEXP _multibrasBOP2_GenPts(SEXP NSimSEXP, SEXP AnaInterSEXP, SEXP ProbsSEXP, SEXP SeedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type NSim(NSimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaInter(AnaInterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Probs(ProbsSEXP);
    Rcpp::traits::input_parameter< double >::type Seed(SeedSEXP);
    rcpp_result_gen = Rcpp::wrap(GenPts(NSim, AnaInter, Probs, Seed));
    return rcpp_result_gen;
END_RCPP
}
// DeterCnm
NumericVector DeterCnm(double Fwer, int NBras, int NSim, IntegerVector AnaInter, IntegerVector AnaEff, IntegerVector AnaTox, NumericVector Prior, NumericVector PN, NumericVector PA, NumericVector Phi, NumericVector Delta, NumericVector LambdaMSeq, NumericVector GammaMSeq, bool Control, double Seed);
RcppExport SEXP _multibrasBOP2_DeterCnm(SEXP FwerSEXP, SEXP NBrasSEXP, SEXP NSimSEXP, SEXP AnaInterSEXP, SEXP AnaEffSEXP, SEXP AnaToxSEXP, SEXP PriorSEXP, SEXP PNSEXP, SEXP PASEXP, SEXP PhiSEXP, SEXP DeltaSEXP, SEXP LambdaMSeqSEXP, SEXP GammaMSeqSEXP, SEXP ControlSEXP, SEXP SeedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Fwer(FwerSEXP);
    Rcpp::traits::input_parameter< int >::type NBras(NBrasSEXP);
    Rcpp::traits::input_parameter< int >::type NSim(NSimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaInter(AnaInterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaEff(AnaEffSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaTox(AnaToxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PN(PNSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PA(PASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LambdaMSeq(LambdaMSeqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type GammaMSeq(GammaMSeqSEXP);
    Rcpp::traits::input_parameter< bool >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< double >::type Seed(SeedSEXP);
    rcpp_result_gen = Rcpp::wrap(DeterCnm(Fwer, NBras, NSim, AnaInter, AnaEff, AnaTox, Prior, PN, PA, Phi, Delta, LambdaMSeq, GammaMSeq, Control, Seed));
    return rcpp_result_gen;
END_RCPP
}
// DeterCnma
NumericVector DeterCnma(double Fwer, int NBras, int NSim, IntegerVector AnaInter, IntegerVector AnaEff, IntegerVector AnaTox, NumericVector Prior, NumericVector PN, NumericVector PA, NumericVector Phi, NumericVector Delta, NumericVector LambdaHSeq, NumericVector GammaHSeq, NumericVector LambdaMonoSeq, NumericVector GammaMonoSeq, bool Control, double Seed);
RcppExport SEXP _multibrasBOP2_DeterCnma(SEXP FwerSEXP, SEXP NBrasSEXP, SEXP NSimSEXP, SEXP AnaInterSEXP, SEXP AnaEffSEXP, SEXP AnaToxSEXP, SEXP PriorSEXP, SEXP PNSEXP, SEXP PASEXP, SEXP PhiSEXP, SEXP DeltaSEXP, SEXP LambdaHSeqSEXP, SEXP GammaHSeqSEXP, SEXP LambdaMonoSeqSEXP, SEXP GammaMonoSeqSEXP, SEXP ControlSEXP, SEXP SeedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Fwer(FwerSEXP);
    Rcpp::traits::input_parameter< int >::type NBras(NBrasSEXP);
    Rcpp::traits::input_parameter< int >::type NSim(NSimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaInter(AnaInterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaEff(AnaEffSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AnaTox(AnaToxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PN(PNSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PA(PASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LambdaHSeq(LambdaHSeqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type GammaHSeq(GammaHSeqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LambdaMonoSeq(LambdaMonoSeqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type GammaMonoSeq(GammaMonoSeqSEXP);
    Rcpp::traits::input_parameter< bool >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< double >::type Seed(SeedSEXP);
    rcpp_result_gen = Rcpp::wrap(DeterCnma(Fwer, NBras, NSim, AnaInter, AnaEff, AnaTox, Prior, PN, PA, Phi, Delta, LambdaHSeq, GammaHSeq, LambdaMonoSeq, GammaMonoSeq, Control, Seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multibrasBOP2_GenPts", (DL_FUNC) &_multibrasBOP2_GenPts, 4},
    {"_multibrasBOP2_DeterCnm", (DL_FUNC) &_multibrasBOP2_DeterCnm, 15},
    {"_multibrasBOP2_DeterCnma", (DL_FUNC) &_multibrasBOP2_DeterCnma, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_multibrasBOP2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
